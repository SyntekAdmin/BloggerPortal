			<!-- MAIN CONTENT -->
<div id="content">

    <div class="row">
        <div class="col-xs-12 col-sm-7 col-md-7 col-lg-4">
            <h1 class="page-title txt-color-blueDark">
                <i class="fa fa-money fa-fw "></i>
                POINTS HISTORY
            </h1>
        </div>
    </div>

    <!-- widget grid -->
    <section id="widget-grid" class="">

        <!-- row -->
        <div class="row">

            <!-- NEW WIDGET START -->
            <article class="col-xs-12 col-sm-12 col-md-12 col-lg-12">

                <!-- Widget ID (each widget will need unique ID)-->
                <div class="jarviswidget jarviswidget-color-blueDark" id="wid-id-3" data-widget-editbutton="false">

                    <!-- widget div-->
                    <div>

                        <!-- widget content -->
                        <div class="widget-body no-padding">
                            <div class="dt-toolbar">
                                <div class="btn-group hidden-xs">
                                    <button class="btn btn-default dropdown-toggle" data-toggle="dropdown">
                                        SORT BY <span class="caret"></span>
                                    </button>
                                    <ul class="dropdown-menu">
                                        <li>
                                            <a href="javascript:void(0);">Earned Points</a>
                                        </li>
                                        <li>
                                            <a href="javascript:void(0);">Used Points</a>
                                        </li>
                                        <li>
                                            <a href="javascript:void(0);">Photo Points</a>
                                        </li>
                                    </ul>
                                </div>
                                <div class="pull-right">
                                    <div class="btn-group hidden-xs">
                                        POINTS BALANCE : 200
                                    </div>
                                </div>
                            </div>
                            <div id="app" v-cloak>
                                <div class="hide">
                                    Search: <input v-model="search">
                                </div>
                                <hr>
                                <vx-table :points="filtered"></vx-table>
                            </div>

                        </div>
                        <!-- end widget content -->

                    </div>
                    <!-- end widget div -->

                </div>
                <!-- end widget -->

            </article>
            <!-- WIDGET END -->

        </div>

        <!-- end row -->
        <!-- end row -->

    </section>
    <!-- end widget grid -->

</div>

<!-- END MAIN CONTENT -->
@section pagespecific {
    <script type="text/javascript">
        // DO NOT REMOVE : GLOBAL FUNCTIONS!
        Vue.component('vx-table', {
            template: '<table class="table table-striped table-bordered table-hover" width="100%"></table>',
            props: ['points'],
            data() {
                return {
                    headers: [
                      { title: 'Date', class: 'dt-head-center dt-body-center' },
                      { title: 'Points Description', class: '' },
                      { title: 'Point', class: 'dt-body-center' },
                      { title: 'Balance', class: 'dt-body-center' }
                    ],
                    rows: [],
                    dtHandle: null
                }
            },
            watch: {
                points(val, oldVal) {
                    let vm = this;
                    vm.rows = [];
                    // You should _probably_ check that this is changed data... but we'll skip that for this example.
                    val.forEach(function (item) {
                        // Fish out the specific column data for each item in your data set and push it to the appropriate place.
                        // Basically we're just building a multi-dimensional array here. If the data is _already_ in the right format you could
                        // skip this loop...
                        let row = [];

                        row.push(item.PAID_DATE);
                        row.push(item.REMARK);
                        if (item.AMOUNT > 0) {
                            row.push("+" + item.AMOUNT);
                        }else{
                            row.push(item.AMOUNT);
                        }
                        row.push(item.BALANCE);

                        console.log(row);
                        vm.rows.push(row);
                    });

                    // Here's the magic to keeping the DataTable in sync.
                    // It must be cleared, new rows added, then redrawn!
                    vm.dtHandle.clear();
                    vm.dtHandle.rows.add(vm.rows);
                    vm.dtHandle.draw();
                }
            },
            mounted() {
                let vm = this;
                // Instantiate the datatable and store the reference to the instance in our dtHandle element.
                vm.dtHandle = $(this.$el).DataTable({
                    // Specify whatever options you want, at a minimum these:
                    columns: vm.headers,
                    data: vm.rows,
                    searching: false,
                    paging: false,
                    info: false
                });
            }
        });

        $(document).ready(function () {

            new Vue({
                el: '#app',
                data: {
                    points: [],
                    search: ''
                },
                computed: {
                    filtered: function () {
                        let self = this
                        let search = self.search.toLowerCase()
                        return self.points.filter(function (pt) {
                            return pt.PAID_DATE.toLowerCase().indexOf(search) !== -1 ||
                              pt.REMARK.toLowerCase().indexOf(search) !== -1 ||
                              pt.AMOUNT.indexOf(search) !== -1 ||
                              pt.BALANCE.toLowerCase().indexOf(search) !== -1
                        })
                    }
                },
                mounted() {
                    var vm = this;

                    $.ajax({
                        url: '/api/influencers/pointshistory',
                        success(res) {
                            console.log(res);

                            vm.points = res;
                        }
                    });

                }
            });
        });

    </script>
}